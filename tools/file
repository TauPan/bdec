#!/usr/bin/env python
"""
A program to identify the type of a binary files.
"""

import glob
import logging
import mako.template
import mako.runtime
import os
import StringIO
import sys
import UserDict

import bdec.data
import bdec.field
import bdec.inspect.chooser
import bdec.output.instance
import bdec.sequenceof
import bdec.spec.xmlspec

def load_specs(spec_dir):
    specs = []
    for spec in glob.glob(os.path.join(spec_dir, '*.xml')):
        try:
            decoder, common, lookup = bdec.spec.xmlspec.load(spec)
        except bdec.spec.LoadError, ex:
            logging.error('failed to load: %s (%s)', spec, ex)
        specs.append(decoder)
    return specs

def load_template(name):
    """
    Load a mako template for displaying data about the given format.

    Returns None if no template could be found.
    """
    path = os.path.join(os.path.dirname(__file__), 'template', '%s.txt' % name)
    if not os.path.exists(path):
        return None
    return mako.template.Template(filename=path)


class _DecodingDict(UserDict.DictMixin):
    """
    A dictionary like object to populate itself with the results of a decode.
    """
    def __init__(self, decode_iter):
        self._decode_iter = decode_iter
        self._stack = list()
        self._dict = dict()

    def _populate_until(self, key):
        """Populate the dictionary until we get a given key."""
        while 1:
            try:
                is_starting, entry, data, value = self._decode_iter.next()
            except StopIteration:
                raise KeyError(key)

            if not is_starting and isinstance(entry, bdec.field.Field):
                # TODO: Keep track of the complete stack, so we can
                # reference items by name.
                name = bdec.output.instance.escape(entry.name)
                self._dict[name] = value
                if name == key:
                    return value

    def __getitem__(self, key):
        try:
            return self._dict[key]
        except KeyError:
            pass

        # We don't have the required key... keep decoding until we get it.
        return self._populate_until(key)

    def __setitem__(self, key, value):
        self._dict[key] = value

    def keys(self):
        return self._dict.keys()

def create_template_text(template, protocol, data):
    """
    Decode as much of the file as necessary to populate the template with data.
    
    Returns the text of the populated template.
    """
    # We cannot pass our custom dictionary directly into the context because;
    #  1. We cannot use a dict 'like' variable when invoking a function with
    #     keyword arguments.
    #  2. The dictionary gets copied anyway (and so our custom lookup routines
    #     are lost).
    buffer = StringIO.StringIO()
    context = mako.runtime.Context(buffer)
    data = _DecodingDict(protocol.decode(data))
    data.update(context._data.iteritems())
    context._data = data
    
    template.render_context(context)
    return buffer.getvalue()

def detect_file_type(protocols, data):
    """
    Detect the type of file from the list of available specifications.

    Returns a list of protocols that appear to match the file type.
    """
    # We have to include an 'unknown' protocol entry, as the chooser will stop
    # differentiating when only one is left (but we want to know if we don't
    # get a match at all).
    unknown = bdec.sequenceof.SequenceOf('unknown', bdec.field.Field('byte', 8), None)
    chooser = bdec.inspect.chooser.Chooser(specs + [unknown])
    options = chooser.choose(data)

    return [option for option in options if option is not unknown]


if len(sys.argv) != 2:
    sys.exit("Usage: %s <filename>" % sys.argv[0])

# Load the specificiations
filename = sys.argv[1]
spec_dir = os.path.join(os.path.dirname(__file__), '..', 'specs')
specs = load_specs(spec_dir)

# Load the data to choose from
binary = file(filename, 'rb')
data = bdec.data.Data(binary)

options = detect_file_type(specs, data)
if not options:
    print "Unknown file type."
elif len(options) > 1:
    print "Matches multiple file types!"
    for option in options:
        print "   ", option.name
else:
    template = load_template(options[0].name)
    if template is not None:
        print create_template_text(template, options[0], data)
    else:
        print options[0].name

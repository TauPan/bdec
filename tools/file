#!/usr/bin/env python
"""
A program to identify the type of a binary files.
"""

import glob
import logging
import os
import sys

import bdec.data
import bdec.chooser
import bdec.sequenceof
import bdec.spec.xmlspec

def load_specs(spec_dir):
    specs = []
    for spec in glob.glob(os.path.join(spec_dir, '*.xml')):
        try:
            decoder, lookup = bdec.spec.xmlspec.load(spec)
        except bdec.spec.LoadError, ex:
            logging.error('failed to load: %s (%s)', spec, ex)
        specs.append(decoder)
    return specs

def detect_specs(protocols, data):
    """
    Given all of the available specifications, detect the type of file.

    Returns a list of protocols that appear to match the file type.
    """
    # We have to include an 'unknown' protocol entry, as the chooser will stop
    # differentiating when only one is left (but we want to know if we don't
    # get a match).
    unknown = bdec.sequenceof.SequenceOf('unknown', bdec.field.Field('byte', 8), None)
    chooser = bdec.chooser.Chooser(specs + [unknown])
    options = chooser.choose(data)

    # We don't want to include 'unknown'
    options = [option for option in options if option is not unknown]
    return options


if len(sys.argv) != 2:
    sys.exit("Usage: %s <filename>" % sys.argv[0])

# Load the specificiations
filename = sys.argv[1]
spec_dir = os.path.join(os.path.dirname(__file__), '..', 'examples')
specs = load_specs(spec_dir)

# Load the data to choose from
binary = file(filename, 'rb').read()
data = bdec.data.Data(binary)

options = detect_specs(specs, data)
if not options:
    print "Unknown file type."
else:
    for option in options:
        print option.name

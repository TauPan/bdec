<protocol>
    <sequence name="ber">
        <reference name="entry" />
    </sequence>

    <common>
        <choice name="entry">
            <reference name="unknown primitive" />
            <reference name="unknown constructed" />
        </choice>

        <sequence name="unknown primitive">
            <sequence name="type">
                <reference name="class" />
                <field name="primitive:" length="1" value="0x0" />
                <reference name="tag number" />
            </sequence>
            <reference name="length:" />
            <field name="data" type="hex" length="${length:} * 8" />
        </sequence>

        <sequence name="unknown constructed">
            <sequence name="type">
                <reference name="class" />
                <field name="constructed:" length="1" value="0x1" />
                <reference name="tag number" />
            </sequence>
            <reference name="length:" />
            <sequenceof name="entries" length="${length:} * 8">
                <reference name="entry" />
            </sequenceof>
        </sequence>

        <!-- FIXME: Correctly decode large tag numbers (see http://www.w3.org/Protocols/HTTP-NG/asn1.html) -->
        <field name="tag number" length="5" type="integer" />

        <choice name="class">
            <field name="universal" length="2" value="0x0" />
            <field name="application" length="2" value="0x1" />
            <field name="context-specific" length="2" value="0x2" />
            <field name="private" length="2" value="0x3" />
        </choice>

        <choice name="length:">
            <sequence name="single byte:" value="${length:}">
                <field length="1" value="0x0" />
                <field name="length:" type="integer" length="7" />
            </sequence>
            <sequence name="multi byte:" value="${length:}">
                <field length="1" value="0x1" />
                <field name="length length:" length="7" type="integer" />
                <field name="length:" type="integer" length="${length length:} * 8" />
            </sequence>
            <sequence name="indefinite:" value="0">
                <field length="1" value="0x1" />
                <field length="7" value="0x0" />
                <!-- We cannot decode indefinite types easily, so we'll just
                  eat all of the data, and say we have zero length.
                  -->
                <sequenceof name="data">
                    <sequence name="byte:">
                        <field name="end:" length="16" value="0x0">
                            <end-sequenceof />
                        </field>
                        <field name="byte" length="8" type="integer" />
                    </sequence>
                </sequenceof>
            </sequence>
        </choice>
    </common>
</protocol>

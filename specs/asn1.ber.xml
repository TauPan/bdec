<protocol>
    <reference name="entry" />

    <common>
        <choice name="entry">
            <reference name="integer" />
            <reference name="numeric string" />
            <reference name="printable string" />
            <reference name="unknown primitive" />
            <reference name="unknown constructed" type="unknown indefinite constructed" />
            <reference name="unknown constructed" type="unknown definite constructed" />
        </choice>

        <sequence name="unknown primitive">
            <sequence name="type">
                <reference name="class" />
                <field name="primitive:" length="1" value="0x0" />
                <reference name="tag number" />
            </sequence>
            <reference name="length:" type="definite length:" />
            <field name="data" type="hex" length="${length:} * 8" />
        </sequence>

        <sequence name="unknown definite constructed">
            <sequence name="type">
                <reference name="class" />
                <field name="constructed:" length="1" value="0x1" />
                <reference name="tag number" />
            </sequence>
            <reference name="length:" type="definite length:" />
            <sequenceof name="entries" length="${length:} * 8">
                <reference name="entry" />
            </sequenceof>
        </sequence>

        <sequence name="unknown indefinite constructed">
            <sequence name="type">
                <reference name="class" />
                <field name="constructed:" length="1" value="0x1" />
                <reference name="tag number" />
            </sequence>
            <field name="length:" length="8" value="0x80" />
            <sequenceof name="entries">
                <choice name="entry">
                    <field length="16" value="0x0"><end-sequenceof /></field>
                    <reference name="entry" />
                </choice>
            </sequenceof>
        </sequence>

        <!-- Define some built-in primitive asn.1 types. -->
        <sequence name="integer" value="${value:}">
            <field name="tag:" length="8" value="0x2" />
            <reference name="length:" type="definite length:" />
            <field name="value:" length="${length:} * 8" type="integer" />
        </sequence>

        <sequence name="printable string">
            <field name="tag:" length="8" value="0x13" />
            <reference name="length:" type="definite length:" />
            <field name="text" length="${length:} * 8" type="text" />
        </sequence>

        <sequence name="numeric string">
            <field name="tag:" length="8" value="0x12" />
            <reference name="length:" type="definite length:" />
            <!-- We'll just treat a numeric string as a normal printable string for now... -->
            <field name="text" length="${length:} * 8" type="text" />
        </sequence>

        <!--
          Define entries capable of decoding the tag number to an integer,
          including multi-byte tags.
          -->
        <sequence name="non-last tag byte:" value="${value:}">
            <field length="1" value="1" />
            <field name="value:" length="7" type="integer" />
        </sequence>
        <sequence name="single byte tag:" value="${value:}">
            <field length="1" value="0x0" />
            <field name="value:" length="7" type="integer" />
        </sequence>
        <sequence name="two byte tag:" value="${non-last tag byte:} * 7 + ${single byte tag:}">
            <reference name="non-last tag byte:" />
            <reference name="single byte tag:" />
        </sequence>
        <sequence name="three byte tag:" value="${non-last tag byte:} * 7 * 7 + ${two byte tag:}">
            <reference name="non-last tag byte:" />
            <reference name="two byte tag:" />
        </sequence>
        <sequence name="four byte tag:" value="${non-last tag byte:} * 7 * 7 * 7 + ${three byte tag:}">
            <reference name="non-last tag byte:" />
            <reference name="three byte tag:" />
        </sequence>
        <sequence name="tag number" value="${value:}">
            <choice name="value:">
                <sequence name="large tag:" value="${multi byte value:}">
                    <field length="5" value="0x1f" />
                    <!--
                      Even though tag numbers could any number of bytes, it
                      would be a little insane to actually find that in
                      practice. Thus we currently limit tag numbers to 4 bytes,
                      which will allow values of up to two hundren million
                      (note that finding tag numbers this large 'in the wild'
                      would be extremely unlikely).
                      -->
                    <choice name="multi byte value:">
                        <reference name="single byte tag:" />
                        <reference name="two byte tag:" />
                        <reference name="three byte tag:" />
                        <reference name="four byte tag:" />
                    </choice>
                </sequence>
                <field name="small tag:" length="5" type="integer" />
            </choice>
        </sequence>

        <choice name="class">
            <field name="universal" length="2" value="0x0" />
            <field name="application" length="2" value="0x1" />
            <field name="context-specific" length="2" value="0x2" />
            <field name="private" length="2" value="0x3" />
        </choice>

        <choice name="definite length:">
            <sequence name="single byte:" value="${length:}">
                <field length="1" value="0x0" />
                <field name="length:" type="integer" length="7" />
            </sequence>
            <sequence name="multi byte:" value="${length:}">
                <field length="1" value="0x1" />
                <field name="length length:" length="7" type="integer" />
                <field name="length:" type="integer" length="${length length:} * 8" />
            </sequence>
        </choice>
    </common>
</protocol>

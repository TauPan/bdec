----
bdec
----

'bdec', a library to decode and encode binary files given an xml specification.


Overview
========

Binary formats typically aren't easily specified; they are rarely specified
in a high level marked language such as ASN.1 (and such specifications
cannot be retro-fitted to existing binary formats). 'bdec' is an attempt
to specify arbitrary binary formats in a markup language, and create a
decoder and encoder automatically for that binary format given the high level
specification.

The bdec xml specification uses constructs based on the constructs found
in ASN.1.


Usage
=====

The bdec library consists of a decoding / encoding library and a command
line decoding and encoding applications. Given a specification, the 
command line application will create an xml representation of the data
contained in the binary file, and can convert the xml back to binary.

The library is capable of creating such xml output, or optionally a python
object representing the constructs contained in the binary data.

For example; the `xml representation of a FAT bootsector`_ generated by
running::

  dd if=/dev/sda1 bs=512 count=1 | decode bootsector.xml

.. _xml representation of a FAT bootsector: doc/files/fatbootsector.xml

Alternatively, the volume label of a fat drive could be changed to ``SOME_LABEL``
by running::
  
  dd if=/dev/sda1 bs=512 count=1 | decode bootsector.xml | sed 's/<volume-label>.*<\/volume-label>/<volume-label>SOME_LABEL<\/volume-label>/g' | encode bootsector.xml | dd of=/dev/sda1 conv=notrunc


Similar projects
================

There other project to perform 'generic' binary decoding;

* Hachoir (http://hachoir.org/) - Very powerful decoding
  library, where binary formats are specified in python
  code (using generators). Quite high level decoding, with
  complex binary files being decoded.
* Construct (http://construct.wikispaces.com/) - Decodes data 
  structures, formats are specified in python code without too
  much high-level intelligence. Not many formats available.


Advantages
==========

* It is easy to write (and read) a specification
* No need to write a custom decoder (all error conditions are handled 
  internally; decoding either passes or fails).
* The command line application allows visual inspection of problematic
  files.
* Unicode aware, little-endian / big-endian aware
* Specify fields down to the bit (eg: single bit flags)


Disadvantages
=============

* The specification is hand-written xml (xml is best for computer 
  reading/writing)
* The speed isn't fantastic (the current design requires the entire file
  be read into memory to be encoded / decoded).

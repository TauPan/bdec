----
bdec
----

'bdec', a set of tools for decoding binary files given an xml specification.


Overview
========

Writing decoders for binary formats is typically tedious and error prone.
Binary formats are usually specified in text documents that developers have
to read if they are to create decoders, a time consuming, frustrating, and
costly process.

While there are high level markup languages such as ASN.1 for specifying
formats, few specifications make use of these languages, and such markup
languages cannot be retro-fitted to existing binary formats. 'bdec' is an
attempt to specify arbitrary binary formats in a markup language, and create
decoders automatically for that binary format given the high level
specification.

Bdec can;

 * Allow specifications to be easily written, updated, and maintained.
 * Decode binary files directly from the specification.
 * Generate portable, readable, and efficient C decoders.
 * Provide rudimentary encoding support.
 * Run under Windows & Unix operating systems

The bdec xml specification uses constructs loosely based on those found in
ASN.1.


Getting started
===============

1. Download_ the latest version.
2. Go through the tutorial_.
3. Try writing a specification for your own file formats (referring to the
   documentation_ where necessary).
4. Save lots of time and pain by *not* writing and maintaining hand written 
   buggy decoders.


Documentation
=============

If you're just getting started, the tutorial_ takes you step by step through
the different concepts used in bdec. Once you've got started, read the rest
of the documentation_ to improve your specifications.

.. _documentation: docs
.. _tutorial: docs/tutorial.html


Usage
=====

Command line
------------

The bdec library includes command line 'bdecode' and 'bcompile' applications.
The 'bdecode' tool will quickly decode a binary file into an xml
representation, and is an excellent way to test your specification as you
write it. The 'bcompile' tool will convert your specification to portable
efficient C code, for integration into your projects.

For example; here is the `xml representation of a FAT bootsector`_ generated by
running::

  dd if=/dev/sda1 bs=512 count=1 | bdecode bootsector.xml

Typical usage is to refine the specification using the 'bdecode' application,
before compiling the specification to generate the library to be used in
native applications.

While there is encoding functionality in the core library, its functionality
is limited, and is not available the compiled decoders.

.. _xml representation of a FAT bootsector: doc/files/fatbootsector.xml


Python module
-------------

The library contains the routines to work on the raw constructs as defined
in the xml specification. It includes functionality for decoding the
binary data directly to python instances (as opposed to xml).



Features
========

* It is easy to quickly write (and read) a specification
* No need to write a custom decoder (all error conditions are handled 
  internally; decoding either passes or fails).
* The command line application allows visual inspection of problematic files.
* Unicode aware, little-endian / big-endian aware
* Specify fields down to the bit (eg: single bit flags)
* Generated decoders are human readable, and compile without any warnings.


Similar projects
================

Some other projects that perform 'generic' binary decoding include;

* Hachoir (http://hachoir.org/) - Very powerful decoding
  library, where binary formats are specified in python
  code (using generators). Quite high level decoding, with
  complex binary files being decoded. Lots of file formats
  are specified (at least partially).
* Construct (http://construct.wikispaces.com/) - Decodes data 
  structures, formats are specified in python code without too
  much high-level intelligence. Not many formats available.
* Asn1c (http://lionet.info/asn1c/) - Asn.1 compiler; generates C language
  encoders / decoders.


License
=======

The bdec library and all decoders generated by the specification compiler
are available under the `GNU Lesser General Public License (LGPL)`_. In
summary, this means;

 * The decoders can be built and used in any application (including commercial
   closed source applications).
 * If used in a closed source application, the decoder must be dynamically
   linked (eg: .dll in Windows, .so in Linux).
 * The source code (and any modifications) to the decoder must be made
   available to anyone you distribute the decoder to.

To use the library and generated decoders without having to make the source
available, please contact licensing at hl.id.au.

.. _GNU Lesser General Public License (LGPL): http://www.gnu.org/licenses/lgpl.txt


Download
========

* `Version 0.4.0`_
  2008-10-08


  Features:

  * Allow common entries to be given another name.
  * Improve readability of generated C code.
  * Don't include unnecessary data structures in C headers.
  * Change to LGPL license.
  * Documentation updates.

  Bugfixes:

  * Various fixes in C decoders.
  * Fix mp3 specification.


* `Version 0.3.2`_
  2008-07-06

  Features

  * The c decoder memory is now freed
  * Decoders are validated with valgrind
  * A new 'release' script to simplify making new releases

  Bugfixes

  * Handle sequence values in the C decoder
  * Print sequence values in the c decoder output
  * Xml output no longer includes whitespace around decoded values
  * Allow entry names to use the '-' character
  * Improve speed when choosing between embedded choices
  * Bit buffers now allocate their own memory (instead of reusing the input)


* `Version 0.3.1`_
  20 April 2008

  Changes:
   Docs;

   * Add external documentation (and tutorial), and update internal docs

   Format specifications;

   * Add a png specification


* `Version 0.3.0`_
  3 April 2008

  Changes:
    Core;

    * Detect invalid integer encodings in a specification
    * Nosetests can now find all unit tests
    * Expressions are resolved after the spec as loaded (allows resolving into
      common items not yet specified).
    * Referenced items can no longer use 'end-sequenceof'
    
    Format specifications;

    * Add a basic asf specification (wma/wmv)
    * Add boolean type (pdf)
    * Limit possible comment characters (pdf)
    * Add test data files for pdf, mp3, jpeg, and vfat


* `Version 0.2.0`_
  17 September 2007

  Changes:
    Core;

    * Add a 'file' tool that attempts to identify the format of a binary file.
    * Support efficient decoding of files (the whole file is no longer read into
      memory).

    Format specifications;

    * More complete pdf protocl specification.
    * Fixes to 'mp3' and 'vfat' specifications.

* `Version 0.1.1`_
  8 August 2007

  Changes:
    Initial standalone release of bdec library. Allows complex specifications
    to be written that can be automatically decoded. The included example 
    specifications include;

     * pdf documents
     * mp3 and jpg media files
     * fat12/fat16/fat32 filesystems

    Encoding is supported only for very basic specifications (no use of 
    expressions).


.. _Version 0.1.1: files/bdec-0.1.1.tar.gz
.. _Version 0.2.0: files/bdec-0.2.0.tar.gz
.. _Version 0.3.0: files/bdec-0.3.0.tar.gz
.. _Version 0.3.1: files/bdec-0.3.1.tar.gz
.. _Version 0.3.2: files/bdec-0.3.2.tar.gz
.. _Version 0.4.0: files/bdec-0.4.0.tar.gz


These page is a list of things it would be nice to have in both the
`protocol specification`_, the implementation_, and in `other
areas`_.


Implementation
==============

Generate an xml specification from an in memory protocol
--------------------------------------------------------

Priority: Medium

Being able to generate an an xml spec from an in memory protocol would
make it easy to convert between different protocol representations.


Allow encoding of a protocol with complex expressions
-----------------------------------------------------

Priority: Medium

Currently encoding protocols that have complex expressions isn't supported.
This would be a useful feature.


Improve method of 'copying' protocol entries
--------------------------------------------

Priority: Medium

The xml specification code currently creates a copy of referenced common
entries to avoid state being shared between them (see the 'pickle' usage in
bdec.spec.xmlspec). This is an ugly solution, and creates an overhead with
the bdec.chooser (as each instance of a shared object must create its own
bdec.choooser.Chooser object).


Remove data instance from field
-------------------------------

Priority: Medium

The storage of the data as an instance of the field object shouldn't be
required; it's hacky that it is in there.


Non-seekable stream data source
-------------------------------

Priority: Medium

Allow decoding of non-seekable data streams (eg: stdin). To do this the data
source needs to track what data is being referenced (ie: in Data.pop and
Data.copy), and caching data that may potentially be accessed later.

Note that this requires `Remove data instance from field`_, as otherwise data
at the start of the file will keep references to data from the start of the
decode (as this early data will never become unaccessible).


Protocol specification
======================

Changing 'default' encoding
---------------------------

Priority: Very low

The tiff header in the jpeg format has a field that specifies the 'encoding'
of all integers that follow (eg: little endian or big endian). This currently
means writing the specification _twice_, once with big endian format and
once for little endian format. Add a mechanism to change the default format for
all 'embedded' fields.

eg::

   <common>
       <sequence name="structure">
           <field name="length:" length="16" type="integer" encoding="default" />
           <field name="data" length="${length:} * 8" type="ascii" />
       </sequence>
   </common>
   <choice name="encoding:">
      <sequence name="intel:">
          <field name="id:" length="8" value="0x0" />
          <default-encoding value="big endian" />
          <sequence name="structure" />
      </sequence>
      <sequence name="motorola:">
          <field name="id:" length="8" value="0x1" />
          <default-encoding value="little endian" />
          <sequence name="structure" />
      </sequence>
   </choice>


Optional protocol entries
-------------------------

Priority: Medium

Some protocols only have a certain protocol entry if a flag is present (for example,
a flag to state that a header is an extended header).

eg::

    <sequence name="header">
       <field name="id:" length="16" value="0x0102" />
       <field name="some flag" length="3" />
       <field name="is extended header:" length="1" />
       <field name="some other flags" length="4" />
       <sequence name="extended header" if="${is extended header:}">
           <field name="some optional field" length="8" />
           <field name="another optional field" length="8" />
       </sequence>
    </sequence>


Other areas
===========

Compile to other languages
--------------------------

Priority: Medium

Add a utility to 'compile' a specification to another language, such as C.


ASN1
----

Priority: Medium

Add a utility to load / convert an `asn1`_ specification to the bdec specification
format (for BER and PER).

.. _asn1: http://en.wikipedia.org/wiki/ASN.1


CSN1
----

Priority: Low

Add a utility to load / convert an `CSN.1`_ specification to the bdec specification
format.

.. _csn1: http://en.wikipedia.org/wiki/CSN.1


Add a better format protocol
----------------------------

Priority: Medium

While xml is easier to programmatically read and write, it isn't very nice for the
user. Another 'user-friendly' format would be nice. Perhaps a reStructuredText
document with custom directives would be good; it would allow good 'in protocol'
documentation which is almost always highly desirable.

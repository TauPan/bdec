<%!
    from bdec.field import Field
    from bdec.sequence import Sequence
%>

<%def name="decodeField(entry, variable)">
  %if entry.format is Field.INTEGER:
     %if entry.length == 8:
    ${variable} = *(unsigned char*)buffer;
    buffer += sizeof(unsigned char);
     %elif entry.length == 16:
    ${variable} = *(unsigned short*)buffer;
    buffer += sizeof(unsigned short);
     %elif entry.length == 32:
    ${variable} = *(unsigned int)buffer;
     %endif
  %elif entry.format is Field.TEXT:
    char* text = malloc(${entry.length} / 8);
    memcpy(buffer, text, ${entry.length} / 8);
    buffer += ${entry.length} / 8;
  %elif entry.format in [Field.BINARY, Field.HEX]:
    readBinary(&result, length);
  %endif
</%def>

<%def name="decodeSequence(entry)">
    ${entry.name}* result = malloc(sizeof(${entry.name}));
  %for child in entry.children:
    %if isinstance(child, Field):
    ${decodeField(child, 'result->' + child.name)}
    %else:
    result->${child.name} = decode_${child.name}(buffer);
    %endif
  %endfor
    return result;
</%def>

<%def name="decode(entry)">
  %if isinstance(entry, Field):
    ${decodeField(entry)}
  %elif isinstance(entry, Sequence):
    ${decodeSequence(entry)}
  %endif
</%def>

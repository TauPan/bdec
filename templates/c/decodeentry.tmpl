## vim:set syntax=mako:
<%!
    from bdec.field import Field
    from bdec.sequence import Sequence
%>

<%def name="decodeField(entry, variable)">
  %if entry.format is Field.INTEGER:
     %if entry.length == 8:
    ${variable} = *(unsigned char*)buffer->buffer;
    buffer->buffer += sizeof(unsigned char);
     %elif entry.length == 16:
    ${variable} = *(unsigned short*)buffer->buffer;
    buffer->buffer += sizeof(unsigned short);
     %elif entry.length == 32:
    ${variable} = *(unsigned int*)buffer->buffer;
    buffer->buffer += sizeof(unsigned int);
     %endif
     %if entry.expected is not None:
    if (${variable} != ${int(entry.expected)})
    {
        return 0;
    }
     %endif
  %elif entry.format is Field.TEXT:
    ${variable} = malloc(${entry.length / 8} + 1);
    memcpy(${variable}, buffer->buffer, ${entry.length / 8});
    ${variable}[${entry.length / 8}] = 0;
    buffer->buffer += ${entry.length / 8};
  %elif entry.format in [Field.BINARY, Field.HEX]:
    readBinary(&result, length);
  %endif
</%def>

<%def name="decodeSequence(entry)">
    ${entry.name}* result = malloc(sizeof(${entry.name}));
  %for child in entry.children:
    %if isinstance(child, Field):
    ${decodeField(child, 'result->' + child.name)}
    %else:
    result->${child.name} = decode_${child.name}(buffer);
    if (result->${child.name} == 0)
    {
        return 0;
    }
    %endif
  %endfor
    return result;
</%def>

## vim:set syntax=mako:
<%namespace file="/expression.tmpl" name="expr" />
<%namespace file="/type.tmpl" name="ctype" />
<%!
    from bdec.data import Data
    from bdec.field import Field
    from bdec.sequence import Sequence
%>


<%!
    import string
    _PRINTABLE = string.ascii_letters + string.digits
    def c_repr(char):
        if char in _PRINTABLE:
            return char
        return '\\%03o' % ord(char)

    def c_string(data):
        return '"%s"' % ''.join(c_repr(char) for char in data)
%>

<%def name="compare_binary_expected(entry, expected)">
  %if len(entry.expected) < 32:
    if (get_integer(&actual) != ${int(entry.expected)})
  %else:
    BitBuffer expected = {(unsigned char*)${c_string(expected.bytes())}, 0, ${len(entry.expected)}};
    int isMatch = 1;
    while (expected.num_bits > 0)
    {
        if (decode_integer(&expected, 1) != decode_integer(&actual, 1))
        {
            isMatch = 0;
            break;
        }
    }
    if (!isMatch)
  %endif
</%def>

<%def name="decodeField(entry, varname)">
    if (${expr.length(entry.length)} > buffer->num_bits)
    {
        return 0;
    }
  %if entry.min is not None or entry.max is not None:
    BitBuffer field_data = *buffer;
    field_data.num_bits = ${expr.length(entry.length)};
  %endif
  %if entry.format == Field.INTEGER:
    %if entry.encoding == Field.BIG_ENDIAN:
    ${varname} = decode_integer(buffer, ${expr.length(entry.length)});
    %else:
    ${varname} = decode_little_endian_integer(buffer, ${expr.length(entry.length)});
    %endif
    %if is_value_referenced(entry):
    *${entry.name |variable} = ${varname};
    %endif
  %elif entry.format == Field.TEXT:
    int i;
    int ${entry.name + ' buffer length' |variable} = ${expr.length(entry.length)} / 8;
    ${varname} = malloc(${entry.name + ' buffer length' |variable} + 1);
    ${varname}[${entry.name + ' buffer length' |variable}] = 0;
    for (i = 0; i < ${entry.name + ' buffer length' |variable}; ++i)
    {
        ${varname}[i] = decode_integer(buffer, 8);
    }
  %elif entry.format == Field.HEX:
    int i;
    assert((${expr.length(entry.length)}) % 8 == 0);
    ${varname}.length = ${expr.length(entry.length)} / 8;
    ${varname}.buffer = malloc(${varname}.length);
    for (i = 0; i < ${varname}.length; ++i)
    {
        ${varname}.buffer[i] = decode_integer(buffer, 8);
    }
  %elif entry.format == Field.BINARY:
    ${varname}.start_bit = buffer->start_bit;
    ${varname}.num_bits = ${expr.length(entry.length)};
    // 0 bits = 0 bytes, 1-8 bits = 1 byte, 9-16 bytes = 2 bytes...
    int numBytes = (buffer->start_bit + buffer->num_bits + 7) / 8;
    ${varname}.buffer = malloc(numBytes);
    memcpy(${varname}.buffer, buffer->buffer, numBytes);
    buffer->start_bit += ${varname}.num_bits;
    buffer->buffer += buffer->start_bit / 8;
    buffer->start_bit %= 8;
    buffer->num_bits -= ${varname}.num_bits;
  %else:
    #error Unknown field type ${entry}
  %endif
     %if entry.expected is not None:
       %if entry.format == entry.INTEGER:
    if (${varname} != ${int(entry.expected)})
       %elif entry.format == entry.BINARY:
           <% 
           extra_bits = 8 - len(entry.expected) % 8
           expected = entry.expected + Data('\x00', start=0, end=extra_bits)
           %>
    BitBuffer actual = ${varname};
    ${compare_binary_expected(entry, expected)}
       %elif entry.format == entry.HEX:
    BitBuffer actual = {${varname}.buffer, 0, ${varname}.length * 8};
    ${compare_binary_expected(entry, entry.expected)}
       %elif entry.format == entry.TEXT:
    if (memcmp(${varname}, ${c_string(entry.expected.bytes())}, ${len(entry.expected) / 8}) != 0)
       %else:
#error Field of type ${entry.format} not currently supported for an expected value!
       %endif
    {
        ${ctype.free_name(entry)}(result);
        return 0;
    }
     %endif
    %if entry.min is not None:
    if (get_integer(&field_data) < ${expr.length(entry.min)})
    {
        ${ctype.free_name(entry)}(result);
        return 0;
    }
    %endif
    %if entry.max is not None:
    if (get_integer(&field_data) > ${expr.length(entry.max)})
    {
        ${ctype.free_name(entry)}(result);
        return 0;
    }
    %endif
</%def>

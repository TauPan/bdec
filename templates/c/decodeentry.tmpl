## vim:set syntax=mako:
<%namespace file="/expression.tmpl" name="expr" />
<%!
    from bdec.field import Field
    from bdec.sequence import Sequence
%>

<%!
def _define_params(entry, get_params):
    result = ""
    for param in get_params(entry):
        if param.direction is param.IN:
            result += ", int %s" % param.name
        else:
            result += ", int* %s" % param.name
    return result

def _params(parent, entry, get_params, local_variables):
    result = ""
    for param in get_params(entry):
        if param.direction is param.OUT and param.name in local_variables:
            result += ", &%s" % param.name
        else:
            result += ", %s" % param.name
    return result
%>

<%def name="define_params(entry)">
${_define_params(entry, get_params)}
</%def>

<%def name="params(parent, entry)">
${_params(parent, entry, get_params, local_vars(parent))}
</%def>

<%def name="decodeField(entry, variable)">
    if (${expr.length(entry.length)} > buffer->num_bits)
    {
        return 0;
    }
  %if entry.format is Field.INTEGER:
    %if entry.encoding is Field.BIG_ENDIAN:
    ${variable} = decode_integer(buffer, ${expr.length(entry.length)});
    %else:
    ${variable} = decode_little_endian_integer(buffer, ${expr.length(entry.length)});
    %endif
    %if is_referenced(entry):
    *${entry.name} = ${variable};
    %endif
  %elif entry.format is Field.TEXT:
    int i;
    int ${entry.name}_length = ${expr.length(entry.length)} / 8;
    ${variable} = malloc(${entry.name}_length + 1);
    ${variable}[${entry.name}_length] = 0;
    for (i = 0; i < ${entry.name}_length; ++i)
    {
        ${variable}[i] = decode_integer(buffer, 8);
    }
  %elif entry.format is Field.HEX:
    int i;
    ${variable}.length = ${expr.length(entry.length)} / 8;
    ${variable}.buffer = malloc(${variable}.length);
    for (i = 0; i < ${variable}.length; ++i)
    {
        ${variable}.buffer[i] = decode_integer(buffer, 8);
    }
  %elif entry.format is Field.BINARY:
    // FIXME: We are referencing the source buffer!
    ${variable} = *buffer;
    ${variable}.num_bits = ${expr.length(entry.length)};
    buffer->start_bit += ${variable}.num_bits;
    buffer->buffer += buffer->start_bit / 8;
    buffer->start_bit %= 8;
    buffer->num_bits -= ${variable}.num_bits;
  %else:
    #error Unknown field type ${entry}
  %endif
     %if entry.expected is not None:
    if (${variable} != ${int(entry.expected)})
    {
        return 0;
    }
     %endif
</%def>

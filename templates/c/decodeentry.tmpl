## vim:set syntax=mako:
<%!
    from bdec.field import Field
    from bdec.sequence import Sequence
%>

<%def name="decodeFieldValue(entry, variable)">
  %if entry.format is Field.INTEGER:
    %if entry.length % 8 == 0:
      %if entry.encoding is Field.BIG_ENDIAN:
    ${variable} = ${" + ".join("(buffer->buffer[%i] << %i)" % (i, (entry.length / 8 - i - 1) * 8) for i in range(entry.length / 8))};
      %else:
    ${variable} = ${" + ".join("(buffer->buffer[%i] << %i)" % ((entry.length / 8) - i - 1, (entry.length / 8 - i - 1) * 8) for i in range(entry.length / 8))};
      %endif
    %else:
      #error Non-byte integers not handled yet... ${entry}
    %endif
  %elif entry.format is Field.TEXT:
    ${variable} = malloc(${entry.length / 8} + 1);
    memcpy(${variable}, buffer->buffer, ${entry.length / 8});
    ${variable}[${entry.length / 8}] = 0;
  %elif entry.format in [Field.BINARY, Field.HEX]:
    #error Binary and hex field types not supported yet...
  %endif
</%def>

<%def name="decodeField(entry, variable)">
    if (buffer->buffer + ${entry.length / 8} > buffer->end)
    {
        return 0;
    }
    ${decodeFieldValue(entry, variable)}
    buffer->buffer += ${entry.length / 8};
     %if entry.expected is not None:
    if (${variable} != ${int(entry.expected)})
    {
        return 0;
    }
     %endif
</%def>

<%def name="decodeSequence(entry)">
    ${entry.name}* result = malloc(sizeof(${entry.name}));
  %for child in entry.children:
    %if isinstance(child, Field):
    ${decodeField(child, 'result->' + child.name)}
    %else:
    result->${child.name} = decode_${child.name}(buffer);
    if (result->${child.name} == 0)
    {
        return 0;
    }
    %endif
  %endfor
    return result;
</%def>

## vim:set syntax=mako:
<%namespace file="/expression.tmpl" name="expr" />
<%!
    from bdec.field import Field
    from bdec.sequence import Sequence
%>

<%def name="decodeFieldValue(entry, variable)">
  %if entry.format is Field.INTEGER:
    %if entry.encoding is Field.BIG_ENDIAN:
    ${variable} = decode_integer(buffer, ${expr.length(entry)});
    %else:
    ${variable} = decode_little_endian_integer(buffer, ${entry.length(entry)});
    %endif
  %elif entry.format is Field.TEXT:
    ${variable} = malloc(${entry.length / 8} + 1);
    memcpy(${variable}, buffer->buffer, ${entry.length / 8});
    ${variable}[${entry.length / 8}] = 0;
    buffer->buffer += ${entry.length / 8};
  %elif entry.format in [Field.BINARY, Field.HEX]:
    #error Binary and hex field types not supported yet...
  %endif
</%def>

<%def name="decodeField(entry, variable)">
    if ((buffer->end - buffer->buffer) * 8 < ${expr.length(entry)})
    {
        return 0;
    }
    ${decodeFieldValue(entry, variable)}
     %if entry.expected is not None:
    if (${variable} != ${int(entry.expected)})
    {
        return 0;
    }
     %endif
</%def>

<%def name="decodeSequence(entry)">
  %for child in entry.children:
    %if isinstance(child, Field):
    ${decodeField(child, 'result->' + child.name)}
    %else:
    if (!decode_${child.name}(buffer, &result->${child.name}))
    {
        return 0;
    }
    %endif
  %endfor
</%def>

## vim:set syntax=mako:

## Create the C 'type' of each protocol entry
<%!
    from bdec.choice import Choice
    from bdec.field import Field
    from bdec.sequence import Sequence
    from bdec.sequenceof import SequenceOf
%>

<%def name="ctype(entry)">
  %if isinstance(entry, Field):
    %if entry.format is Field.INTEGER:
int
    %elif entry.format is Field.TEXT:
char*
    %elif entry.format is Field.HEX:
Buffer
    %else:
#error Unhandled field format '${entry}'!
    %endif
  %else:
${entry.name}
  %endif
</%def>

<%def name="define(entry)" >
    %for child in entry.children:
      %if not isinstance(child, Field):
${define(child)}
      %endif
    %endfor

  %if isinstance(entry, Sequence):
typedef struct 
{
  %for child in entry.children:
    ${ctype(child)} ${child.name};
  %endfor
} ${entry.name};
  %elif isinstance(entry, Field):
typedef ${ctype(entry)} ${child.name};
  %elif isinstance(entry, Choice):
typedef struct
{
    %for child in entry.children:
    ${ctype(child)}* ${child.name};
    %endfor
} ${entry.name};
  %elif isinstance(entry, SequenceOf):
typedef struct
{
    ${ctype(child)}* items;
    unsigned int count;
} ${entry.name};
  %else:
Unsupported entry ${entry}
  %endif
</%def>
